// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: public_member_api_docs, prefer_single_quotes

import 'dart:async';

import 'package:flutter/widgets.dart';

/// A class generated by flappy_translator package containing localized strings
class I18n {
  static String get appTitle => _getText('appTitle');

  static String get login => _getText('login');

  static String get password => _getText('password');

  static String get signIn => _getText('signIn');

  static String get register => _getText('register');

  static String get signInWithGoogle => _getText('signInWithGoogle');

  static String get proxySettings => _getText('proxySettings');

  static String get domain => _getText('domain');

  static String get url => _getText('url');

  static String get save => _getText('save');

  static String get registration => _getText('registration');

  static String get eMail => _getText('eMail');

  static String get surname => _getText('surname');

  static String get next => _getText('next');

  static late Map<String, String> _localizedValues;

  static const _enValues = {
    'appTitle': 'Mocsi',
    'login': 'Login',
    'password': 'Password',
    'signIn': 'Sign in',
    'register': 'Register',
    'signInWithGoogle': 'Sign in with Google',
    'proxySettings': 'Proxy settings',
    'domain': 'Domain',
    'url': 'URL',
    'save': 'Save',
    'registration': 'Registration',
    'eMail': 'E-mail',
    'surname': 'Surname',
    'next': 'Next',
  };

  static const _ruValues = {
    'appTitle': 'Mocsi',
    'login': 'Логин',
    'password': 'Пароль',
    'signIn': 'Вход',
    'register': 'Регистрация',
    'signInWithGoogle': 'Вход через Google',
    'proxySettings': 'Настройка прокси',
    'domain': 'Домен',
    'url': 'URL',
    'save': 'Сохранить',
    'registration': 'Регистрация',
    'eMail': 'Электронная почта',
    'surname': 'Отчество',
    'next': 'Далее',
  };

  static const _allValues = {
    'en': _enValues,
    'ru': _ruValues,
  };

  I18n(Locale locale) {
    _locale = locale;
    _localizedValues = {};
  }

  static late Locale _locale;

  static String _getText(String key) =>
      _localizedValues[key] ?? '** $key not found';

  static Locale get currentLocale => _locale;

  static String get currentLanguage => _locale.languageCode;

  static Future<I18n> load(Locale locale) async {
    final translations = I18n(locale);
    _localizedValues = _allValues[locale.toString()]!;
    return translations;
  }
}

class I18nDelegate extends LocalizationsDelegate<I18n> {
  const I18nDelegate();

  static final Set<Locale> supportedLocals = {
    Locale('en'),
    Locale('ru'),
  };

  @override
  bool isSupported(Locale locale) => supportedLocals.contains(locale);

  @override
  Future<I18n> load(Locale locale) => I18n.load(locale);

  @override
  bool shouldReload(I18nDelegate old) => false;
}
